

int minSquares(int h, int w)
{
    	int ver_min = INT_MAX;
    	int hor_min = INT_MAX;
	int		ans = 0 ;

    	if (m == n) {
	    ans = 1 ;
	}  else {
    if (dp[m][n])
            return dp[m][n];
     
    /* The rectangle is cut horly and 
       verly into two parts and the cut 
       with minimum value is found for every 
       recursive call. 
    */
     
    for (int i = 1;i<= m/2;i++)
    {
        // Calculating the minimum answer for the 
        // rectangles with width equal to n and length 
        // less than m for finding the cut point for 
        // the minimum answer
        hor_min = min(minimumSquare(i, n) + 
                minimumSquare(m-i, n), hor_min); 
    }
     
    for (int j = 1;j<= n/2;j++)
    {
        // Calculating the minimum answer for the 
        // rectangles with width less than n and 
        // length equal to m for finding the cut 
        // point for the minimum answer
        ver_min = min(minimumSquare(m, j) + 
                minimumSquare(m, n-j), ver_min);
    }
         
    // Minimum of the ver cut or hor 
    // cut to form a square is the answer
    dp[m][n] = min(ver_min, hor_min); 
         
    return dp[m][n];
}


